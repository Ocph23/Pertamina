// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200831084901_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApp.Models.Absen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AbsenType")
                        .HasColumnType("int");

                    b.Property<int?>("KaryawanIdKaryawan")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Masuk")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Pulang")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("KaryawanIdKaryawan");

                    b.ToTable("Absen");
                });

            modelBuilder.Entity("WebApp.Models.BuktiPelanggaran", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IdPelanggaran")
                        .HasColumnType("int");

                    b.Property<int?>("PelanggaranIdPelanggaran")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PelanggaranIdPelanggaran");

                    b.ToTable("BuktiPelanggaran");
                });

            modelBuilder.Entity("WebApp.Models.Jenispelanggaran", b =>
                {
                    b.Property<int>("idjenispelanggaran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("jenispelanggaran")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("penambahanpoint")
                        .HasColumnType("double");

                    b.Property<double>("pengurangankaryawan")
                        .HasColumnType("double");

                    b.Property<double>("penguranganperusahaan")
                        .HasColumnType("double");

                    b.HasKey("idjenispelanggaran");

                    b.HasIndex("LevelId");

                    b.ToTable("JenisPelanggaran");
                });

            modelBuilder.Entity("WebApp.Models.Karyawan", b =>
                {
                    b.Property<int>("IdKaryawan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alamat")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Kodekaryawan")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Kontak")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Namakaryawan")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdKaryawan");

                    b.ToTable("Karyawan");
                });

            modelBuilder.Entity("WebApp.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LevelName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("WebApp.Models.Pelanggaran", b =>
                {
                    b.Property<int>("IdPelanggaran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DataKaryawanIdKaryawan")
                        .HasColumnType("int");

                    b.Property<int?>("DataPerusahaanIdPerusahaan")
                        .HasColumnType("int");

                    b.Property<int?>("Jenispelanggaranidjenispelanggaran")
                        .HasColumnType("int");

                    b.Property<double>("NilaiKaryawan")
                        .HasColumnType("double");

                    b.Property<double>("NilaiPerusahaan")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tanggal")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idjenispelanggaran")
                        .HasColumnType("int");

                    b.Property<int>("idkaryawan")
                        .HasColumnType("int");

                    b.Property<int>("idperusahaan")
                        .HasColumnType("int");

                    b.HasKey("IdPelanggaran");

                    b.HasIndex("DataKaryawanIdKaryawan");

                    b.HasIndex("DataPerusahaanIdPerusahaan");

                    b.HasIndex("Jenispelanggaranidjenispelanggaran");

                    b.ToTable("Pelanggaran");
                });

            modelBuilder.Entity("WebApp.Models.Pemenang", b =>
                {
                    b.Property<int>("IdPemenang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdKaryawan")
                        .HasColumnType("int");

                    b.Property<int>("IdPeriode")
                        .HasColumnType("int");

                    b.Property<int?>("KaryawanIdKaryawan")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodeIdPeriode")
                        .HasColumnType("int");

                    b.HasKey("IdPemenang");

                    b.HasIndex("KaryawanIdKaryawan");

                    b.HasIndex("PeriodeIdPeriode");

                    b.ToTable("Pemenang");
                });

            modelBuilder.Entity("WebApp.Models.Pengaduan", b =>
                {
                    b.Property<int>("IdPengaduan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDetail")
                        .HasColumnType("int");

                    b.Property<string>("JenisPengaduan")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdPengaduan");

                    b.ToTable("Pengaduan");
                });

            modelBuilder.Entity("WebApp.Models.Periode", b =>
                {
                    b.Property<int>("IdPeriode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Mulai")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Selesai")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Undian")
                        .HasColumnType("datetime(6)");

                    b.HasKey("IdPeriode");

                    b.ToTable("Periode");
                });

            modelBuilder.Entity("WebApp.Models.Perusahaan", b =>
                {
                    b.Property<int>("IdPerusahaan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("alamat")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("direktur")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("emaildirektur")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("kontakdirektur")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("logo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("namaperusahaan")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdPerusahaan");

                    b.ToTable("Perusahaan");
                });

            modelBuilder.Entity("WebApp.Models.PerusahaanKaryawan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdKaryawan")
                        .HasColumnType("int");

                    b.Property<int>("IdPerusahaan")
                        .HasColumnType("int");

                    b.Property<string>("Jabatan")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("KaryawanIdKaryawan")
                        .HasColumnType("int");

                    b.Property<DateTime>("MulaiKerja")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PerusahaanIdPerusahaan")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SelesaiKerja")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("KaryawanIdKaryawan");

                    b.HasIndex("PerusahaanIdPerusahaan");

                    b.ToTable("PerusahaanKaryawan");
                });

            modelBuilder.Entity("WebApp.Models.Terlapor", b =>
                {
                    b.Property<int>("IdTerlapor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdJenisPelanggaran")
                        .HasColumnType("int");

                    b.Property<int>("IdKaryawan")
                        .HasColumnType("int");

                    b.Property<int>("IdPengadian")
                        .HasColumnType("int");

                    b.HasKey("IdTerlapor");

                    b.ToTable("Terlapor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Absen", b =>
                {
                    b.HasOne("WebApp.Models.Karyawan", "Karyawan")
                        .WithMany("Absens")
                        .HasForeignKey("KaryawanIdKaryawan");
                });

            modelBuilder.Entity("WebApp.Models.BuktiPelanggaran", b =>
                {
                    b.HasOne("WebApp.Models.Pelanggaran", null)
                        .WithMany("Files")
                        .HasForeignKey("PelanggaranIdPelanggaran");
                });

            modelBuilder.Entity("WebApp.Models.Jenispelanggaran", b =>
                {
                    b.HasOne("WebApp.Models.Level", "Level")
                        .WithMany("Datas")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Pelanggaran", b =>
                {
                    b.HasOne("WebApp.Models.Karyawan", "DataKaryawan")
                        .WithMany("Pelanggarans")
                        .HasForeignKey("DataKaryawanIdKaryawan");

                    b.HasOne("WebApp.Models.Perusahaan", "DataPerusahaan")
                        .WithMany("Pelanggarans")
                        .HasForeignKey("DataPerusahaanIdPerusahaan");

                    b.HasOne("WebApp.Models.Jenispelanggaran", "Jenispelanggaran")
                        .WithMany()
                        .HasForeignKey("Jenispelanggaranidjenispelanggaran");
                });

            modelBuilder.Entity("WebApp.Models.Pemenang", b =>
                {
                    b.HasOne("WebApp.Models.Karyawan", "Karyawan")
                        .WithMany()
                        .HasForeignKey("KaryawanIdKaryawan");

                    b.HasOne("WebApp.Models.Periode", "Periode")
                        .WithMany()
                        .HasForeignKey("PeriodeIdPeriode");
                });

            modelBuilder.Entity("WebApp.Models.PerusahaanKaryawan", b =>
                {
                    b.HasOne("WebApp.Models.Karyawan", "Karyawan")
                        .WithMany("Perusahaans")
                        .HasForeignKey("KaryawanIdKaryawan");

                    b.HasOne("WebApp.Models.Perusahaan", "Perusahaan")
                        .WithMany("PerusahaansKaryawan")
                        .HasForeignKey("PerusahaanIdPerusahaan");
                });
#pragma warning restore 612, 618
        }
    }
}
